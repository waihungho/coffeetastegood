/*Code from http://www.schmalzhaus.com/EasyDriver/Examples/Ea... */
int Distance = 0; // Record the number of steps we've taken 
void setup() { 
  Serial.begin(9600);
  pinMode(8, OUTPUT); 
  pinMode(9, OUTPUT); 
  digitalWrite(8, LOW); 
  digitalWrite(9, LOW); 

} 
double count=0;
int thisStatus = -1; // 1 means move away from motor; -1 means move towards from motor.

double MAX_COUNT = 83500; // It's constant value for all the delay.
void loop(){
  
  //
  if ( 0==1 ) {
    digitalWrite(8, LOW);       // LOW: run away from motor; HIGH: move towards from motor
    digitalWrite(9, HIGH); 
    delayMicroseconds(5);     // Lesser time, motor faster  // 3: is the min
    digitalWrite(9, LOW); 
    delayMicroseconds(100);  // 30: is the min
  } else { 
    count++;
    // digitalWrite(8, LOW);       // LOW: run away from motor; HIGH: move towards from motor
    if ( count>MAX_COUNT ) {  // 84000 : end to end  
      // 83500 : for  
//      digitalWrite(9, HIGH); 
//      delayMicroseconds(5);     // Lesser time, motor faster
//      digitalWrite(9, LOW); 
//      delayMicroseconds(100); 
      
      thisStatus = thisStatus * -1;
      count=0;
    }
    if (thisStatus==1){
      digitalWrite(8, LOW);
    } else {
      digitalWrite(8, HIGH);
    }
    digitalWrite(9, HIGH); 
    delayMicroseconds(5);     // Lesser time, motor faster
    digitalWrite(9, LOW); 
    delayMicroseconds(30); 
  }

  
}
//void loop() { 
//  digitalWrite(9, HIGH); 
//  delayMicroseconds(100); 
//  digitalWrite(9, LOW); 
//  delayMicroseconds(100); 
//  Distance = Distance + 1; // record this step // Check to see if we are at the end of our move 
//  // two rotation for 1/8 bridge and 1 rotation for 1/6 bridge (for this code) 
//  if (Distance == 32000) { // We are! Reverse direction (invert DIR signal) 
//    if (digitalRead(8) == LOW) { 
//      digitalWrite(8, HIGH); 
//    } else { 
//      digitalWrite(8, LOW); 
//    } // Reset our distance back to zero since we're // starting a new move 
//    Distance = 0; // Now pause for half a second delay(500); 
//  } 
//}



